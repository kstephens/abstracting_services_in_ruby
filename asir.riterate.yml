--- 
riterate: 
  version: "1.0"
  do_not_update: true
  ordered_slides: 
  - Abstracting Services in Ruby
  - Stuff Gets Complicated
  - "Back when things were simple..."
  - "Trying to improve user's experience..."
  - "Use other machines to poll a work table..."
  - "Use queue infrastructure"
  - "Issues"
  - "Problem Domain, Solution Domain"
  - "Service Middleware Semantics"
  - "Testing, Debugging, Diagnostics"
  - Objectives
  - Foundations of Objects
  - Messaging
  - REST
  - "Design"
  - "Design: Nouns"
  - "Design: Verbs"
  - "Simple"
  - "Client-Side Request"
  - "Server-Side"
  - "Client-Side Response"
  - Sample Service
  - Using a Client Proxy
  - Example Request
  - Client support for any Module
  - Client Proxy
  - Request
  - Response
  - Coder
  - Identity Coder
  - Transport
  - Call service directly
  - "Call service directly - Output"
  - In-core, in-process service
  - Sample Service with Client Support
  - "In-core, in-process service - Output"
  - One-way, asynchronous subprocess service
  - Subprocess Transport
  - "One-way, asynchronous subprocess service - Output"
  - "Subprocess service with continuation"
  - One-way, file log service
  - "One-way, file log service - Output"
  - Replay file log
  - "Replay file log - Output"
  - One-way, named pipe service
  - Named Pipe Server
  - "One-way, named pipe service - Output"
  - One-way, named pipe service with signature
  - "One-way, named pipe service with signature - Output"
  - One-way, named pipe service with invalid signature
  - "One-way, named pipe service with invalid signature - Output"
  - Socket service
  - "Socket service - Output"
  - Socket service with forwarded exception.
  - "Socket service with forwarded exception. - Output"
  - Example Exception
  - Encapsulated Exception
  - "Socket service with local fallback."
  - "Socket service with local fallback. - Output"
  - Implementation
  - Transport
  - Transport#send_request
  - Local Transport
  - Null Transport
  - YAML Coder
  - File Transport
  - File Transport Support
  - Payload IO for Transport
  - Transport#receive_request
  - Process (receive) requests from a file.
  - Stream Transport
  - Serve all Requests from a stream.
  - Serve a Request from a stream.
  - Chain Coder
  - Marshal Coder
  - Sign Coder
  - TCP Socket Transport
  - TCP Socket Server
  - TCP Socket Client
  - "Transport#send_response"
  - "Transport#receive_response"
  - "Sends the encoded Request payload String."
  - "Receives the encoded Request payload String."
  - "Sends the encoded Response payload String."
  - "Receives the encoded Response payload String."
  - Fallback Transport
  - Buffer Transport
  - Synopsis
  - Appendix
  - Modules and Classes
  - Object Initialization
  - Diagnostic Logging
  - Null Coder
  - Sign Coder Support
  - Broadcast Transport
  - HTTP Transport
  - Transport Support
  - Request Identity
  - Code More
  - Client Mixin
  - Proxy Configuration

  unknown_slides: []

  unordered_slides: []

